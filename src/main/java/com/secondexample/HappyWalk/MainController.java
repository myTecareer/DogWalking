package com.secondexample.HappyWalk;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import javax.validation.Valid;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;


@Controller
public class MainController {
    @Autowired//to get the bean called userRepository
    //which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //---------------- Log In -----------------------
    @GetMapping("/loginform")
    public  String loginForm(Model model){
        model.addAttribute("user", new User());
        //add value of user into model object, making it accessible to the view template
        return "loginForm";
    }
    @PostMapping("/loginformNew")
    public String submitLogin(@ModelAttribute("user") User user, Model model) {//@ModelAttribute to retrieve the argument from the model

        String password = encryptPW(user.getPassword());
        user = userRepository.findByPasswordAndEmail(password,user.getEmail());
        model.addAttribute("user", user);
        //if Password and Email are corrected: go to different user page
        if(user != null){
            if(user.getType().equals("Walker")){
                return "result";
            }
            else if(user.getType().equals("Owner")){
                return  "redirect:/getByDistrict";
            }
            else{
                return  "redirect:/demo/listAllTheUsers";
            }
        }
        //if password and email not exists, then return error page.
        else{
            return "registration-problem";
        }
    }

    //---------------- Sign Up -----------------------
    @GetMapping("/urlsignup")
    public String signupForm( Model model){//use a Model object to expose a new User to the view template.
        model.addAttribute("user", new User());
        return "signupForm";
    }
    @PostMapping("/urlsignup")
    //public String submitForm(@ModelAttribute("user") User user){
    public String submitForm(@Valid @ModelAttribute("user") User user, BindingResult bindingResult ){
                            //@Valid applies validation rules on object 'user'
                            //BindingResult interface holds the validation result
        User curr_user = userRepository.findByEmail(user.getEmail());
//        model.addAttribute("user", curr_user);
        if(curr_user != null){
            //email is taken
            throw new IllegalStateException("email taken");
        }
        if(bindingResult.hasErrors()){
            return "signupForm";
        }
        else{
            user.setPassword(encryptPW(user.getPassword()));
            userRepository.save(user);
            return "redirect:/loginform";
        }
    }

    //---------------- Encrypt Password -----------------------
    public String encryptPW(String pass) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(pass.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }


//---------------- search by name -----------------------

    @GetMapping("/getByName")
    public String searchByName(Model model){
        model.addAttribute("user", new User());
        return "searchByName";
    }

    @PostMapping("/getByName")
    public String  getUserByName(@ModelAttribute User user, Model model){
        model.addAttribute("users", userRepository.findByNameLike(user.getName()));

           return "getWalkerByDistrictResult";
    }

    //---------------- search by District -----------------------
    @GetMapping("/getByDistrict")
    public String searchByDistrict(Model model){
        model.addAttribute("user", new User());
        return "searchByDistrict";
    }
    @PostMapping("/getByDistrict")
    public String  getWalkerByDistrict(@ModelAttribute User user, Model model){
        model.addAttribute("users", userRepository.findByDistrict(user.getDistrict()));
        List<User> userList = userRepository.findByDistrict(user.getDistrict());
        return "getWalkerByDistrictResult";
    }

    //---------------- Admin Page update user -----------------------
    @GetMapping("/letUsersUpdate/{id}")
    public String  letUsersUpdate(@PathVariable(value="id") Integer userId,
                                  Model model)   {
                                //@PathVariable use it to fetch the template part of the URI, represented by the variable {id}
        User user = userRepository.findById(userId)
                .orElseThrow(()-> new IllegalStateException(
                        "user with id" + userId + "does not exists."
                ));
        model.addAttribute("user", user);
        return "update_user";
    }

    //---------------- Walker Page update profile -----------------------
    @GetMapping("/createWalkerProfile/{id}")
    public String createWalkerProfile(@PathVariable(value="id")Integer userId,
                                      Model model){
        User user = userRepository.findById(userId)
                .orElseThrow(()-> new IllegalStateException(
                        "user with id" + userId + "does not exists."
                ));
        model.addAttribute("user", user);
        return "update_walker_profile";

    }

    //---------------- Admin Page delete user -----------------------
    @GetMapping("/demo/delete/{id}")
    public String demodeleteUser(@PathVariable(value="id") Integer userId) {
        boolean exists = userRepository.existsById(userId);

        if (!exists) {
            throw new IllegalStateException("user with id " + userId + " does not exists.");
        }
        userRepository.deleteById(userId);
        return "redirect:/demo/listAllTheUsers";
    }

    //---------------- Admin Page save user -----------------------
    @PostMapping("/saveUser")
    public String saveUser(@ModelAttribute("user") User user) {

        userRepository.save(user);
        return "redirect:/demo/listAllTheUsers";
    }

    //---------------- Walker Page save profile -----------------------
    @PostMapping("/saveUserProfile")
    public String saveUserProfile(@ModelAttribute("user") User user, Model model) {
        model.addAttribute("user", user);
        userRepository.save(user);
        return "sitter-page";
    }

    //---------------- Postman Test delete -----------------------
    @DeleteMapping("/delete/{id}")
    public String deleteUser(@PathVariable(value="id") Integer userId){
        boolean exists = userRepository.existsById(userId);
        if(!exists){
            throw new IllegalStateException("user with id "+ userId+" does not exists.");
        }
        userRepository.deleteById(userId);
        return "redirect:/demo/listAllTheUsers";


    }

    //---------------- Postman Test update -----------------------
    @PutMapping("/update/{id}")
    public String updateById(@PathVariable(value="id")Integer userId,
                           @RequestParam(required = false)String name,
                           @RequestParam(required = false)String email){
        //@RequestParam extract value from the query string
        User orginUser = userRepository.findById(userId)
                .orElseThrow(()-> new IllegalStateException(
                        "user with id" + userId + "does not exists."
                ));

        System.out.println("user.oldname:"+orginUser.getName());
        System.out.println("input name:"+ name);
        if(name != null && name.length() > 0 &&
           !Objects.equals(orginUser.getName(), name)){
            orginUser.setName(name);
        }
        //if email is new and not taken, then update
        if(email != null && email.length() > 0 &&
                !Objects.equals(orginUser.getEmail(), email)){
            Optional<User> userOptional = Optional.ofNullable(userRepository
                    .findByEmail(email));
            if(userOptional.isPresent()){
                throw new IllegalStateException("email taken");
            }
            orginUser.setEmail(email);
            userRepository.save(orginUser);
        }
        return "redirect:/demo/listAllTheUsers";
    }

    //---------------- API show dog pic -----------------------
    @GetMapping("/showDogPic")
    public String showDogPic(RestTemplate restTemplate, Model model){
        DogPic dogPic = restTemplate.getForObject("https://dog.ceo/api/breeds/image/random", DogPic.class);
        model.addAttribute("dogPic", dogPic);
        return "dog_pic";
    }

}
